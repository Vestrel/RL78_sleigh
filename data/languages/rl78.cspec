<?xml version="1.0" encoding="UTF-8"?>

<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/compiler_spec.rxg -->

<compiler_spec>
  <data_organization>
    <!-- char has an alignment of 2 -->
    <absolute_max_alignment value="0" />
    <machine_alignment value="2" />
    <default_alignment value="2" />
    <default_pointer_alignment value="2" />
    <pointer_size value="3" />
    <wchar_size value="2" />
    <short_size value="2" />
    <integer_size value="2" />
    <long_size value="4" />
    <long_long_size value="8" />
    <float_size value="4" />
    <double_size value="4" />
    <long_double_size value="8" />
  </data_organization>
  <global>
    <range space="ram"/>
  </global>
  <stackpointer register="SP" space="ram" growth="negative"/>
  <returnaddress>
    <varnode space="stack" offset="0" size="4"/>
  </returnaddress>
  <default_proto>
    <prototype name="__v2_call" strategy="register" extrapop="0" stackshift="4">
    <input killedbycall="false" pointermax="4">
      <pentry minsize="1" maxsize="2">
        <register name="AX0"/>
      </pentry>
      <pentry minsize="1" maxsize="2">
        <register name="BC0"/>
      </pentry>
      <pentry minsize="3" maxsize="3" metatype="pointer">
        <addr space="join" piece1="C0" piece2="AX0"/>
      </pentry>
      <pentry minsize="2" maxsize="2">
        <register name="DE0"/>
      </pentry>
      <pentry minsize="4" maxsize="4">
        <addr space="join" piece1="DE0" piece2="BC0"/>
      </pentry>

      <pentry minsize="1" maxsize="500" align="2">
        <addr offset="2" space="stack"/>
      </pentry>
    </input>
      <output killedbycall="true">
        <pentry minsize="1" maxsize="1">
          <register name="A0"/>
        </pentry>
        <pentry minsize="2" maxsize="2">
          <register name="AX0"/>
        </pentry>
      </output>
      <killedbycall>
        <register name="ES0"/>
        <register name="CS0"/>
      </killedbycall>
      <unaffected>
        <register name="SP"/>
        <register name="PSW"/>
        <register name="HL0"/>
      </unaffected>
      <localrange>
        <range space="stack"/>
      </localrange>
      <returnaddress>
        <varnode space="stack" offset="0" size="4"/>
      </returnaddress>
    </prototype>
  </default_proto>
  <callotherfixup targetop="getNextInstructionLength">
    <pcode dynamic="true">
      <output name="len"/>
    </pcode>
  </callotherfixup>
</compiler_spec>
