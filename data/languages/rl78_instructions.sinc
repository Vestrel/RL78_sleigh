#
# Table 1/30
#

# MOV r, #byte
:MOV DREG_BYTE, u8 is op_h=0x5 & DREG_BYTE; u8 {
    DREG_BYTE = u8;
}

# MOV r, A
:MOV DREG_BYTE, A is op_h=0x7 & A & DREG_BYTE & dreg_byte!=1 {
    DREG_BYTE = A;
}

# MOV A, r
:MOV A, DREG_BYTE is op_h=0x6 & A & DREG_BYTE & dreg_byte!=1 {
    A = DREG_BYTE;
}

# MOV saddr, #byte
:MOV saddr, u8 is opcode=0xCD; saddr; u8 {
    saddr = u8;
}

# MOV sfr, #byte
:MOV sfr_byte, u8 is opcode=0xCE; sfr_byte; u8 {
    sfr_byte = u8;
}

# MOV !addr16, #byte
:MOV addr16, u8 is opcode=0xCF; addr16; u8 {
    addr16 = u8;
}

# MOV A, saddr
:MOV A, saddr is opcode=0x8D & A; saddr {
    A = saddr;
}

# MOV saddr, A
:MOV saddr, A is opcode=0x9D & A; saddr {
    saddr = A;
}

# MOV A, sfr
:MOV A, sfr is opcode=0x8E & A; sfr {
    A = sfr;
}

# MOV sfr, A
:MOV sfr, A is opcode=0x9E & A; sfr {
    sfr = A;
}

# MOV A, !addr16
:MOV A, addr16 is opcode=0x8F & A; addr16 {
    A = addr16;
}

# MOV !addr16, A
:MOV addr16, A is opcode=0x9F & A; addr16 {
    addr16 = A;
}

# MOV PSW, #byte
:MOV PSW, u8 is opcode=0x9F & PSW; opcode=0xFA; u8 {
    PSW = u8;
    CY = PSW[0, 1];
    ISP0 = PSW[1, 1];
    ISP1 = PSW[2, 1];
    RBS0 = PSW[3, 1];
    AC = PSW[4, 1];
    RBS1 = PSW[5, 1];
    Z = PSW[6, 1];
    IE = PSW[7, 1];
}

# MOV A, PSW
:MOV A, PSW is opcode=0x8E & A & PSW; opcode=0xFA {
    PSW[0, 1] = CY;
    PSW[1, 1] = ISP0;
    PSW[2, 1] = ISP1;
    PSW[3, 1] = RBS0;
    PSW[4, 1] = AC;
    PSW[5, 1] = RBS1;
    PSW[6, 1] = Z;
    PSW[7, 1] = IE;
    A = PSW;
}

# MOV PSW, A
:MOV PSW, A is opcode=0x9E & A & PSW; opcode=0xFA {
    PSW = A;
    CY = PSW[0, 1];
    ISP0 = PSW[1, 1];
    ISP1 = PSW[2, 1];
    RBS0 = PSW[3, 1];
    AC = PSW[4, 1];
    RBS1 = PSW[5, 1];
    Z = PSW[6, 1];
    IE = PSW[7, 1];
}

# MOV ES, #byte
:MOV ES, ulo8 is opcode=0x41 & ES; ulo8 {
    ES = ulo8;
}

# MOV A, ES
:MOV A, ES is opcode=0x8E & A & ES; opcode=0xFD {
    A = ES & 0xf;
}

# MOV ES = A
:MOV ES, A is opcode=0x9E & A & ES; opcode=0xFD {
    ES = A;
}

# MOV CS, #byte
:MOV CS, ulo8 is opcode=0xCE & CS; opcode=0xFC; ulo8 {
    CS = ulo8;
}

#
# Table 2/30
#

# MOV A, CS
:MOV A, CS is opcode=0x8E & A & CS; opcode=0xFC {
    A = CS & 0xf;
}

# MOV CS, A
:MOV CS, A is opcode=0x9E & A & CS; opcode=0xFC {
	CS = A;
}

# MOV A, [DE]
:MOV A, AddrDE is opcode=0x89 & A & AddrDE {
    A = AddrDE;
}

# MOV [DE], A
:MOV AddrDE, A is opcode=0x99 & A & AddrDE {
    AddrDE = A;
}

# MOV [DE+byte], #byte
:MOV AddrDEOffset, u8 is opcode=0xCA; AddrDEOffset; u8 {
    AddrDEOffset = u8;
}

# MOV A, [DE+byte]
:MOV A, AddrDEOffset is opcode=0x8A & A; AddrDEOffset {
    A = AddrDEOffset;
}

# MOV [DE+byte], A
:MOV AddrDEOffset, A is opcode=0x9A & A; AddrDEOffset {
    AddrDEOffset = A;
}

# MOV A, [HL]
:MOV A, AddrHL is opcode=0x8B & A & AddrHL {
    A = AddrHL;
}

# MOV [HL], A
:MOV AddrHL, A is opcode=0x9B & A & AddrHL {
    AddrHL = A;
}

# MOV [HL+byte], #byte
:MOV AddrHLOffset, u8 is opcode=0xCC; AddrHLOffset; u8 {
    AddrHLOffset = u8;
}

# MOV A, [HL+byte]
:MOV A, AddrHLOffset is opcode=0x8C & A; AddrHLOffset {
    A = AddrHLOffset;
}

# MOV [HL+byte], A
:MOV AddrHLOffset, A is opcode=0x9C & A; AddrHLOffset {
    AddrHLOffset = A;
}

# MOV word[B], #byte
:MOV AddrWordOffsetB, u8 is opcode=0x19; AddrWordOffsetB; u8 {
    AddrWordOffsetB = u8;
}

# MOV A, word[B]
:MOV A, AddrWordOffsetB is opcode=0x09 & A; AddrWordOffsetB {
    A = AddrWordOffsetB;
}

# MOV word[B], A
:MOV AddrWordOffsetB, A is opcode=0x18 & A; AddrWordOffsetB {
    AddrWordOffsetB = A;
}

# MOV word[C], #byte
:MOV AddrWordOffsetC, u8 is opcode=0x38; AddrWordOffsetC; u8 {
    AddrWordOffsetC = u8;
}

# MOV A, word[C]
:MOV A, AddrWordOffsetC is opcode=0x29 & A; AddrWordOffsetC {
    A = AddrWordOffsetC;
}

# MOV word[C], A
:MOV AddrWordOffsetC, A is opcode=0x28 & A; AddrWordOffsetC {
    AddrWordOffsetC = A;
}

# MOV word[BC], #byte
:MOV AddrWordOffsetBC, u8 is opcode=0x39; AddrWordOffsetBC; u8 {
    AddrWordOffsetBC = u8;
}

# MOV A, word[BC]
:MOV A, AddrWordOffsetBC is opcode=0x49 & A; AddrWordOffsetBC {
    A = AddrWordOffsetBC;
}

# MOV word[BC], A
:MOV AddrWordOffsetBC, A is opcode=0x48 & A; AddrWordOffsetBC {
    AddrWordOffsetBC = A;
}

# MOV [SP+byte], #byte
:MOV AddrSPOffset, u8 is opcode=0xC8; AddrSPOffset; u8 {
    AddrSPOffset = u8;
}

# MOV A, [SP+byte]
:MOV A, AddrSPOffset is opcode=0x88 & A; AddrSPOffset {
    A = AddrSPOffset;
}

# MOV [SP+byte], A
:MOV AddrSPOffset, A is opcode=0x98 & A; AddrSPOffset {
    AddrSPOffset = A;
}

# MOV B, saddr
:MOV B, saddr is opcode=0xE8 & B; saddr {
    B = saddr;
}

# MOV B, !addr16
:MOV B, addr16 is opcode=0xE9 & B; addr16 {
    B = addr16;
}

# MOV C, saddr
:MOV C, saddr is opcode=0xF8 & C; saddr {
    C = saddr;
}

# MOV C, !addr16
:MOV C, addr16 is opcode=0xF9 & C; addr16 {
    C = addr16;
}

# MOV X, saddr
:MOV X, saddr is opcode=0xD8 & X; saddr {
    X = saddr;
}

# MOV X, !addr16
:MOV X, addr16 is opcode=0xD9 & X; addr16 {
    X = addr16;
}

#
# Table 3/30
#

# XCH A, X
:XCH A, X is opcode=0x08 & A & X {
    inst_xch(A, X);
}

#
# Table 4/30
#

# ONEB r
:ONEB DREG_AXBC is op_h=0xE & op_l<4 & DREG_AXBC {
    DREG_AXBC = 1;
}

# ONEB saddr
:ONEB saddr is opcode=0xE4; saddr {
    saddr = 1;
}

# ONEB !addr16
:ONEB addr16 is opcode=0xE5; addr16 {
    addr16 = 1;
}

# CLRB r
:CLRB DREG_AXBC is op_h=0xF & DREG_AXBC & clrb_unused=0  {
    DREG_AXBC = 0;
}

# CLRB saddr
:CLRB saddr is opcode=0xF4; saddr {
    saddr = 0;
}

# CLRB !addr16
:CLRB addr16 is opcode=0xF5; addr16 {
    addr16 = 0;
}

# MOVW rp, #word
:MOVW DREG_WORD, u16 is op_h=0x3 & DREG_WORD; u16 {
    DREG_WORD = u16;
}

# MOVW saddrp, #word
:MOVW saddrp, u16 is opcode=0xC9; saddrp; u16 {
    saddrp = u16;
}

# MOVW sfr, #word
:MOVW sfrp, u16 is opcode=0xCB; sfrp; u16 {
    sfrp = u16;
}

# MOVW AX, saddrp
:MOVW AX, saddrp is opcode=0xAD & AX; saddrp {
    AX = saddrp;
}

# MOVW saddrp, AX
:MOVW saddrp, AX is opcode=0xBD & AX; saddrp {
    saddrp = AX;
}

# MOVW AX, sfr
:MOVW AX, sfrp is opcode=0xAE & AX; sfrp {
    AX = sfrp;
}

# MOVW sfr, AX
:MOVW sfrp, AX is opcode=0xBE & AX; sfrp {
    sfrp = AX;
}

# MOVW AX, rp
:MOVW AX, DREG_WORD is op_h=0x1 & AX & DREG_WORD & dreg_word!=0 & rp_source=1 {
    AX = DREG_WORD;
}

# MOVW rp, AX
:MOVW DREG_WORD, AX is op_h=0x1 & AX & DREG_WORD & dreg_word!=0 & rp_source=0 {
    DREG_WORD = AX;
}

# MOVW AX, !addr16
:MOVW AX, addr16w is opcode=0xAF & AX; addr16w {
    AX = addr16w;
}

# MOVW !addr16, AX
:MOVW addr16w, AX is opcode=0xBF & AX; addr16w {
    addr16w = AX;
}

# MOVW AX, [DE]
:MOVW AX, AddrDEW is opcode=0xA9 & AX & AddrDEW {
    AX = AddrDEW;
}

# MOVW [DE], AX
:MOVW AddrDEW, AX is opcode=0xB9 & AX & AddrDEW {
    AddrDEW = AX;
}

# MOVW AX, [DE+byte]
:MOVW AX, AddrDEOffsetW is opcode=0xAA & AX; AddrDEOffsetW {
    AX = AddrDEOffsetW;
}

# MOVW [DE+byte], AX
:MOVW AddrDEOffsetW, AX is opcode=0xBA & AX; AddrDEOffsetW {
    AddrDEOffsetW = AX;
}

# MOVW AX, [HL]
:MOVW AX, AddrHLW is opcode=0xAB & AX & AddrHLW {
    AX = AddrHLW;
}

# MOVW [HL], AX
:MOVW AddrHLW, AX is opcode=0xBB & AX & AddrHLW {
    AddrHLW = AX;
}

# MOVW AX, [HL+byte]
:MOVW AX, AddrHLOffsetW is opcode=0xAC & AX; AddrHLOffsetW {
    AX = AddrHLOffsetW;
}

# MOVW [HL+byte], AX
:MOVW AddrHLOffsetW, AX is opcode=0xBC & AX; AddrHLOffsetW {
    AddrHLOffsetW = AX;
}

# MOVW AX, word[B]
:MOVW AX, AddrWordOffsetBW is opcode=0x59 & AX; AddrWordOffsetBW {
    AX = AddrWordOffsetBW;
}

#
# Table 5/30
#

# MOVW word[B], AX
:MOVW AddrWordOffsetBW, AX is opcode=0x58 & AX; AddrWordOffsetBW {
    AddrWordOffsetBW = AX;
}

# MOVW AX, word[C]
:MOVW AX, AddrWordOffsetCW is opcode=0x69 & AX; AddrWordOffsetCW {
    AX = AddrWordOffsetCW;
}

# MOVW word[C], AX
:MOVW AddrWordOffsetCW, AX is opcode=0x68 & AX; AddrWordOffsetCW {
    AddrWordOffsetCW = AX;
}

# MOVW AX, word[BC]
:MOVW AX, AddrWordOffsetBCW is opcode=0x79 & AX; AddrWordOffsetBCW {
    AX = AddrWordOffsetBCW;
}

# MOVW word[BC], AX
:MOVW AddrWordOffsetBCW, AX is opcode=0x78 & AX; AddrWordOffsetBCW {
    AddrWordOffsetBCW = AX;
}

# MOVW AX, [SP+byte]
:MOVW AX, AddrSPOffsetW is opcode=0xA8 & AX; AddrSPOffsetW {
    AX = AddrSPOffsetW;
}

# MOVW [SP+byte], AX
:MOVW AddrSPOffsetW, AX is opcode=0xB8 & AX; AddrSPOffsetW {
    AddrSPOffsetW = AX;
}

# MOVW BC, saddrp
:MOVW BC, saddrp is opcode=0xDA & BC; saddrp {
    BC = saddrp;
}

# MOVW BC, !addr16
:MOVW BC, addr16w is opcode=0xDB & BC; addr16w {
    BC = addr16w;
}

# MOVW DE, saddrp
:MOVW DE, saddrp is opcode=0xEA & DE; saddrp {
    DE = saddrp;
}

# MOVW DE, !addr16
:MOVW DE, addr16w is opcode=0xEB & DE; addr16w {
    DE = addr16w;
}

# MOVW HL, saddrp
:MOVW HL, saddrp is opcode=0xFA & HL; saddrp {
    HL = saddrp;
}

# MOVW HL, !addr16
:MOVW HL, addr16w is opcode=0xFB & HL; addr16w {
    HL = addr16w;
}

# XCHW AX, rp
:XCHW AX, DREG_WORD is op_h=0x3 & rp_source=1 & DREG_WORD & dreg_word!=0 & AX {
    local tmp = AX;
    AX = DREG_WORD;
    DREG_WORD = tmp;
}

# ONEW AX
:ONEW AX is opcode=0xE6 & AX {
    AX = 1;
}

# ONEW BC
:ONEW BC is opcode=0xE7 & BC {
    BC = 1;
}

# CLRW AX
:CLRW AX is opcode=0xF6 & AX {
    AX = 0;
}

# CLRW BC
:CLRW BC is opcode=0xF7 & BC {
    BC = 0;
}

#
# Table 6/30
#

# ADD A, #byte
:ADD A, u8 is opcode=0x0C & A; u8 {
    inst_add(A, u8);
}

# ADD saddr, #byte
:ADD saddr, u8 is opcode=0x0A; saddr; u8 {
    inst_add(saddr, u8);
}

# ADD A, saddr
:ADD A, saddr is opcode=0x0B & A; saddr {
    inst_add(A, saddr);
}

# ADD A, !addr16
:ADD A, addr16 is opcode=0x0F & A; addr16 {
    inst_add(A, addr16);
}

# ADD A, [HL]
:ADD A, AddrHL is opcode=0x0D & A & AddrHL {
    inst_add(A, AddrHL);
}

# ADD A, [HL+byte]
:ADD A, AddrHLOffset is opcode=0x0E & A; AddrHLOffset {
    inst_add(A, AddrHLOffset);
}



# ADDC A, #byte
:ADDC A, u8 is opcode=0x1C & A; u8 {
    inst_addc(A, u8);
}

# ADDC saddr, #byte
:ADDC saddr, u8 is opcode=0x1A; saddr; u8 {
    inst_addc(saddr, u8);
}

#
# Table 7/30
#

# ADDC A, saddr
:ADDC A, saddr is opcode=0x1B & A; saddr {
    inst_addc(A, saddr);
}

# ADDC A, !uint16
:ADDC A, addr16 is opcode=0x1F & A; addr16 {
    inst_addc(A, addr16);
}

# ADDC A, [HL]
:ADDC A, AddrHL is opcode=0x1D & A & AddrHL {
    inst_addc(A, AddrHL);
}

# ADDC A, [HL+byte]
:ADDC A, AddrHLOffset is opcode=0x1E & A; AddrHLOffset {
    inst_addc(A, AddrHLOffset);
}



# SUB A, #byte
:SUB A, u8 is opcode=0x2C & A; u8 {
    inst_sub(A, u8);
}

# SUB saddr, #byte
:SUB saddr, u8 is opcode=0x2A; saddr; u8 {
    inst_sub(saddr, u8);
}



# SUB A, saddr
:SUB A, saddr is opcode=0x2B & A; saddr {
    inst_sub(A, saddr);
}

# SUB A, !addr16
:SUB A, addr16 is opcode=0x2F & A; addr16 {
    inst_sub(A, addr16);
}

# SUB A, [HL]
:SUB A, AddrHL is opcode=0x2D & A & AddrHL {
    inst_sub(A, AddrHL);
}

# SUB A, [HL+byte]
:SUB A, AddrHLOffset is opcode=0x2E & A; AddrHLOffset {
    inst_sub(A, AddrHLOffset);
}



#
# Table 8/30
#

# SUBC A, #byte
:SUBC A, u8 is opcode=0x3C & A; u8 {
    inst_subc(A, u8);
}

# SUBC saddr, #byte
:SUBC saddr, u8 is opcode=0x3A; saddr; u8 {
    inst_subc(saddr, u8);
}



# SUBC A, saddr
:SUBC A, saddr is opcode=0x3B & A; saddr {
    inst_subc(A, saddr);
}

# SUBC A, !addr16
:SUBC A, addr16 is opcode=0x3F & A; addr16 {
    inst_subc(A, addr16);
}

# SUBC A, [HL]
:SUBC A, AddrHL is opcode=0x3D & A & AddrHL {
    inst_subc(A, AddrHL);
}

# SUBC A, [HL+byte]
:SUBC A, AddrHLOffset is opcode=0x3E & A; AddrHLOffset {
    inst_subc(A, AddrHLOffset);
}

# AND A, #byte
:AND A, u8 is opcode=0x5C & A; u8 {
    inst_and(A, u8);
}

# AND saddr, #byte
:AND saddr, u8 is opcode=0x5A; saddr; u8 {
    inst_and(saddr, u8);
}

#
# Table 9/30
#

# AND A, saddr
:AND A, saddr is opcode=0x5B & A; saddr {
    inst_and(A, saddr);
}

# AND A, !addr16
:AND A, addr16 is opcode=0x5F & A; addr16 {
    inst_and(A, addr16);
}

# AND A, [HL]
:AND A, AddrHL is opcode=0x5D & A & AddrHL {
    inst_and(A, AddrHL);
}

# AND A, [HL+byte]
:AND A, AddrHLOffset is opcode=0x5E & A; AddrHLOffset {
    inst_and(A, AddrHLOffset);
}

# OR A, #byte
:OR A, u8 is opcode=0x6C & A; u8 {
    inst_or(A, u8);
}

# OR saddr, #byte
:OR saddr, u8 is opcode=0x6A; saddr; u8 {
    inst_or(saddr, u8);
}


# OR A, saddr
:OR A, saddr is opcode=0x6B & A; saddr {
    inst_or(A, saddr);
}

# OR A, !addr16
:OR A, addr16 is opcode=0x6F & A; addr16 {
    inst_or(A, addr16);
}

# OR A, [HL]
:OR A, AddrHL is opcode=0x6D & A & AddrHL {
    inst_or(A, AddrHL);
}

# OR A, [HL+byte]
:OR A, AddrHLOffset is opcode=0x6E & A; AddrHLOffset {
    inst_or(A, AddrHLOffset);
}



#
# Table 10/30
#

# XOR A, #byte
:XOR A, u8 is opcode=0x7C & A; u8 {
    inst_xor(A, u8);
}

# XOR saddr, #byte
:XOR saddr, u8 is opcode=0x7A; saddr; u8 {
    inst_xor(saddr, u8);
}



# XOR A, saddr
:XOR A, saddr is opcode=0x7B & A; saddr {
    inst_xor(A, saddr);
}

# XOR A, !addr16
:XOR A, addr16 is opcode=0x7f & A; addr16 {
    inst_xor(A, addr16);
}

# XOR A, [HL]
:XOR A, AddrHL is opcode=0x7D & A & AddrHL {
    inst_xor(A, AddrHL);
}

# XOR A, [HL+byte]
:XOR A, AddrHLOffset is opcode=0x7E & A; AddrHLOffset {
    inst_xor(A, AddrHLOffset);
}



# CMP A, #byte
:CMP A, u8 is opcode=0x4C & A; u8 {
    inst_cmp(A, u8);
}

# CMP saddr, #byte
:CMP saddr, u8 is opcode=0x4A; saddr; u8 {
    inst_cmp(saddr, u8);
}

# NOTE: Similar to XOR above, CMP can be simplified by looking
# at the 5 upper bits of the second byte of the instruction.
# 0x48 -> 0x9



#
# Table 11/30
#

# CMP A, saddr
:CMP A, saddr is opcode=0x4B & A; saddr {
    inst_cmp(A, saddr);
}

# CMP A, !addr16
:CMP A, addr16 is opcode=0x4F & A; addr16 {
    inst_cmp(A, addr16);
}

# CMP A, [HL]
:CMP A, AddrHL is opcode=0x4D & A & AddrHL {
    inst_cmp(A, AddrHL);
}

# CMP A, [HL+byte]
:CMP A, AddrHLOffset is opcode=0x4E & A; AddrHLOffset {
    inst_cmp(A, AddrHLOffset);
}



# CMP !addr16, #byte
:CMP addr16, u8 is opcode=0x40; addr16; u8 {
    inst_cmp(addr16, u8);
}

# CMP0, r
:CMP0 DREG_AXBC is op_h=0xD & op_l<4 & DREG_AXBC {
    inst_cmp0(DREG_AXBC);
}

# CMP0 saddr
:CMP0 saddr is opcode=0xD4; saddr {
    inst_cmp0(saddr);
}

# CMP0 !addr16
:CMP0 addr16 is opcode=0xD5; addr16 {
    inst_cmp0(addr16);
}



# ADDW AX, #word
:ADDW AX, u16 is opcode=0x04 & AX; u16 {
    inst_addw(AX, u16);
}

# ADDW AX, AX
:ADDW AX, "AX" is AX & opcode=0x1 {
    inst_addw(AX, AX);
}

# ADDW AX, rp
:ADDW AX, DREG_WORD is op_h=0x0 & AX & rp_source=1 & movw_op=0 & DREG_WORD & dreg_word!=0 {
    inst_addw(AX, DREG_WORD);
}

# ADDW AX, saddrp
:ADDW AX, saddrp is opcode=0x06 & AX; saddrp {
    inst_addw(AX, saddrp);
}

# ADDW AX, !addr16
:ADDW AX, addr16w is opcode=0x02 & AX; addr16w {
    inst_addw(AX, addr16w);
}



# SUBW AX, #word
:SUBW AX, u16 is opcode=0x24 & AX; u16 {
    inst_subw(AX, u16);
}

# SUBW AX, rp
:SUBW AX, DREG_WORD is op_h=0x2 & AX & rp_source=1 & movw_op=0 & DREG_WORD & dreg_word!=0 {
    inst_subw(AX, DREG_WORD);
}

# SUBW AX, saddrp
:SUBW AX, saddrp is opcode=0x26 & AX; saddrp {
    inst_subw(AX, saddrp);
}

# SUBW AX, !addr16
:SUBW AX, addr16w is opcode=0x22 & AX; addr16w {
    inst_subw(AX, addr16w);
}



#
# Table 12/30
#

# CMPW AX, #word
:CMPW AX, u16 is opcode=0x44 & AX; u16 {
    inst_cmpw(AX, u16);
}

# CMPW AX, rp
:CMPW AX, DREG_WORD is op_h=0x4 & AX & rp_source=1 & movw_op=0 & DREG_WORD & dreg_word!=0 {
    inst_cmpw(AX, DREG_WORD);
}

# CMPW AX, saddrp
:CMPW AX, saddrp is opcode=0x46 & AX; saddrp {
    inst_cmpw(AX, saddrp);
}

# CMPW AX, !addr16
:CMPW AX, addr16w is opcode=0x42 & AX; addr16w {
    inst_cmpw(AX, addr16w);
}


# MULU X
:MULU X (AX"="A"*X") is opcode=0xD6 & AX & X & A {
    local aw:2 = zext(A:1);
    local xw:2 = zext(X:1);
    AX = aw * xw;
}

# MULHU
:MULHU ("AXBC="AX"*"BC) is opcode=0xCE; opcode=0xFB; opcode=0x01 & AX & BC {
    local axdw:4 = zext(AX:2);
    local bcdw:4 = zext(BC:2);
    local res:4 = axdw * bcdw;

    bcdw = (res & 0xFFFF0000) >> 16;
    axdw = (res & 0x0000FFFF);

    BC = bcdw:2;
    AX = axdw:2;
}

# MULH
:MULH ("AXBC="AX"*"BC) is opcode=0xCE; opcode=0xFB; opcode=0x02 & AX & BC {
    local axdw:4 = sext(AX:2);
    local bcdw:4 = sext(BC:2);
    local res:4 = axdw * bcdw;

    bcdw = (res & 0xFFFF0000) >> 16;
    axdw = (res & 0x0000FFFF);

    BC = bcdw:2;
    AX = axdw:2;
}

# DIVHU
:DIVHU ("AXDE="AX"/"DE) is opcode=0xCE; opcode=0xFB; opcode=0x03 & AX & DE {
    local axdw:4 = zext(AX:2);
    local dedw:4 = zext(DE:2);

    # Doesn't handle the case where DE is 0
    local div:4 = axdw / dedw;
    local rem:4 = axdw % dedw;

    dedw = div & 0xFFFF;
    axdw = rem & 0xFFFF;

    DE = dedw:2;
    AX = axdw:2;
}

# DIVWU
:DIVWU is opcode=0xCE; opcode=0xFB; opcode=0x04 { divwu(); }

# MACHU
:MACHU is opcode=0xCE; opcode=0xFB; opcode=0x05 { machu(); }

# MACH
:MACH is opcode=0xCE; opcode=0xFB; opcode=0x06 { mach(); }

# INC r
:INC DREG_BYTE is op_h=0x8 & DREG_BYTE {
    inst_inc(DREG_BYTE);
}

# INC saddr
:INC saddr is opcode=0xA4; saddr {
    inst_inc(saddr);
}

# INC !addr16
:INC addr16 is opcode=0xA0; addr16 {
    inst_inc(addr16);
}


# DEC r
:DEC DREG_BYTE is op_h=0x9 & DREG_BYTE {
    inst_dec(DREG_BYTE);
}

# DEC saddr
:DEC saddr is opcode=0xB4; saddr {
    inst_dec(saddr);
}

# DEC !addr16
:DEC addr16 is opcode=0xB0; addr16 {
    inst_dec(addr16);
}



#
# Table 13
#

# INCW rp
:INCW DREG_WORD is op_h=0xA & DREG_WORD {
    inst_incw(DREG_WORD);
}

# INCW saddrp
:INCW saddrp is opcode=0xA6; saddrp {
    inst_incw(saddrp);
}

# INCW !addr16
:INCW addr16w is opcode=0xA2; addr16w {
    inst_incw(addr16w);
}

# DECW rp
:DECW DREG_WORD is op_h=0xB & DREG_WORD {
    inst_decw(DREG_WORD);
}

# DECW saddrp
:DECW saddrp is opcode=0xB6; saddrp {
    inst_decw(saddrp);
}

# DECW !addr16
:DECW addr16w is opcode=0xB2; addr16w {
    inst_decw(addr16w);
}



# CALL $!addr20
:CALL jdisp16 is opcode=0xFE; jdisp16 {
    SP = SP - 4;
    *[near]:3 SP = inst_next;
    call jdisp16;
}

# CALL !addr16
:CALL jaddr16 is opcode=0xFD; jaddr16 {
    SP = SP - 4;
    *[near]:3 SP = inst_next;
    call jaddr16;
}

# CALL !!addr20
:CALL addr20 is opcode=0xFC; addr20 {
    SP = SP - 4;
    *[near]:3 SP = inst_next;
    call addr20;
}



# RET
:RET is opcode=0xD7 {
    SP = SP + 4;
    PC = *[near] SP;
    return [PC];
}



# PUSH rp
:PUSH DREG_WORD is op_h=0xC & DREG_WORD & rp_source=1 {
    SP = SP - 2;
    *[near]:2 SP = DREG_WORD;
}



# POP rp
:POP DREG_WORD is op_h=0xC & DREG_WORD & rp_source=0 {
    DREG_WORD = *[near] SP;
    SP = SP + 2;
}

# MOVW SP, #word
:MOVW SP, u16 is opcode=0xCB & SP; opcode=0xF8; u16 {
    SP = u16;
}

# MOVW SP, AX
:MOVW SP, AX is opcode=0xBE & AX & SP; opcode=0xF8 {
    SP = AX;
}

# MOVW AX, SP
:MOVW AX, SP is opcode=0xAE & AX & SP; opcode=0xF8 {
    AX = SP;
}

# ADDW SP, #byte
:ADDW SP, u8 is opcode=0x10 & SP; u8 {
    SP = SP + zext(u8);
}

# SUBW SP, #byte
:SUBW SP, u8 is opcode=0x20 & SP; u8 {
    SP = SP - zext(u8);
}


# BR $addr20
:BR jdisp8 is opcode=0xEF; jdisp8 {
    goto jdisp8;
}

# BR $!addr20
:BR jdisp16 is opcode=0xEE; jdisp16 {
    goto jdisp16;
}

# BR !addr16
:BR jaddr16 is opcode=0xED; jaddr16 {
    goto jaddr16;
}

# BR !!addr20
:BR addr20 is opcode=0xEC; addr20 {
    goto addr20;
}

# BC $addr20
:BC jdisp8 is opcode=0xDC; jdisp8 {
    if (CY) goto jdisp8;
}

# BNC $addr20
:BNC jdisp8 is opcode=0xDE; jdisp8 {
    if (!CY) goto jdisp8;
}

# BZ $addr20
:BZ jdisp8 is opcode=0xDD; jdisp8 {
    if (Z) goto jdisp8;
}

# BNZ $addr20
:BNZ jdisp8 is opcode=0xDF; jdisp8 {
    if (!Z) goto jdisp8;
}





# NOP
:NOP is opcode=0x00 {}

# PREFIX
:^instruction is es_prefix=0 & opcode=0x11; epsilon ... & instruction [ es_prefix=1; ] {
    build instruction;
}
