
macro aux_carry(dst, src) {
    $(AC) = ((dst & 0xf) + (src & 0xf)) > 0xf;
}

macro aux_borrow(dst, src) {
    $(AC) = (dst & 0xf) < (src & 0xf);
}

macro inst_xch(dst, src) {
    local tmp:1 = dst;
    dst = src;
    src = tmp;
}

macro inst_inc(dst) {
    aux_carry(dst, 1);
    $(Z) = (dst == -1);
    dst = dst + 1;
}

macro inst_dec(dst) {
    aux_borrow(dst, 1);
    $(Z) = (dst == 1);
    dst = dst - 1;
}

macro inst_add(dst, src) {
    aux_carry(dst, src);
    $(CY) = (0xff - dst) < src;
    dst = dst + src;
    $(Z) = dst == 0;
}

macro inst_addc(dst, src) {
    dst = dst + $(CY);
    inst_add(dst, src);
}

macro inst_sub(dst, src) {
    aux_borrow(dst, src);
    $(CY) = dst < src;
    $(Z) = dst == src;
    dst = dst - src;
}

macro inst_subc(dst, src) {
    dst = dst - $(CY);
    inst_sub(dst, src);
}

macro inst_and(dst, src) {
    dst = dst & src;
    $(Z) = (dst == 0);
}

macro inst_or(dst, src) {
    dst = dst | src;
    $(Z) = (dst == 0);
}

macro inst_xor(dst, src) {
    dst = dst ^ src;
    $(Z) = (dst == 0);
}

macro inst_incw(dst) {
    dst = dst + 1;
}

macro inst_decw(dst) {
    dst = dst - 1;
}

macro inst_shr(dst, n) {
    local tmp = dst >> (n-1);
    $(CY) = (tmp & 1) == 1;
    dst = tmp >> 1;
}

macro inst_shl(dst, n) {
    $(CY) = (dst & (1 << (n-1))) != 0;
    dst = dst << n;
}

macro inst_shlw(dst, n) {
    inst_shl(dst, n);
}

macro inst_sar(dst, n) {
    local tmp = dst s>> (n-1);
    $(CY) = (tmp & 1) == 1;
    dst = tmp s>> 1;
}

macro inst_sarw(dst, n) {
    inst_sar(dst, n);
}

macro inst_cmp(dst, src) {
    $(Z) = dst == src;
    $(CY) = dst < src;
    aux_borrow(dst, src);
}

macro inst_cmp0(dst) {
    $(Z) = dst == 0;
    $(AC) = 0;
    $(CY) = 0;
}

macro inst_addw(dst, src) {
    $(CY) = (0xffff - dst) < src;
    dst = dst + src;
    $(Z) = dst == 0;
}

macro inst_subw(dst, src) {
    $(CY) = dst < src;
    $(Z) = dst == src;
    dst = dst - src;
}

macro inst_cmpw(dst, src) {
    $(Z) = dst == src;
    $(CY) = dst < src;
}

macro mov1_read(dst, src, bit) {
    dst = (src & (1 << bit)) != 0;
}

macro mov1_write(dst, src, bit) {
    dst = dst | (src & (1 << bit));
}

# Destination for AND1 is always $(CY)
macro inst_and1(src, bit) {
    local src_bit:1 = (src & (1 << bit)) >> bit;
    $(CY) = $(CY) & src_bit;
}

# Destination for OR1 is always $(CY)
macro inst_or1(src, bit) {
    local src_bit:1 = (src & (1 << bit) >> bit);
    $(CY) = $(CY) | src_bit;
}

# Destination for XOR1 is always $(CY)
macro inst_xor1(src, bit) {
    local src_bit:1 = (src & (1 << bit) >> bit);
    $(CY) = $(CY) ^ src_bit;
}

macro inst_set1(dst, bit) {
    dst = dst | (1 << bit);
}

macro inst_clr1(dst, bit) {
    dst = dst & (~dst & (0 << bit));
}

macro branch(target) {
    PC = target;
    goto target;
}

macro inst_bt(src, bit, target) {
    if (src & (1 << bit)) goto target;
}

macro inst_bf(src, bit, target) {
    if (!(src & (1 << bit))) goto target;
}

macro inst_btclr(src, bit, target) {
    if (!(src & (1 << bit))) goto target;
    # Clear the bit post-branch, would be a NOP
    # if the bit was not set in the first place
    src = (~src & (0 << bit));
}
